<?php

/**
 * Hyvä Themes - https://hyva.io
 * Copyright © Hyvä Themes 2020-present. All rights reserved.
 * This product is licensed per Magento install
 * See https://hyva.io/license
 */

use Hyva\Theme\Model\ViewModelRegistry;
use Hyva\Theme\ViewModel\HeroiconsOutline;
use Hyva\Theme\ViewModel\HeroiconsSolid;
use Magento\Framework\View\Helper\SecureHtmlRenderer;
use Magento\Framework\Escaper;
use Magento\Review\Block\Product\View as ProductReview;
//use Magento\Theme\Block\Html\Pager;

// phpcs:disable Generic.Files.LineLength.TooLong

/** @var ProductReview $block */
/** @var SecureHtmlRenderer $secureRenderer */
/** @var Escaper $escaper */
/** @var Pager $toolbar */
/** @var ViewModelRegistry $viewModels */

/** @var HeroiconsOutline $heroicons */
$heroicons = $viewModels->require(HeroiconsOutline::class);

/** @var HeroiconsSolid $heroiconsSolid */
$heroiconsSolid = $viewModels->require(HeroiconsSolid::class);

$reviewCollection = $block->getReviewsCollection();

$reviewCollection->load()->addRateVotes();

$items = $reviewCollection->getItems();
$counter = 0;

$format = $block->getDateFormat() ?: \IntlDateFormatter::SHORT;
$formatLong = $block->getDateFormat() ?: \IntlDateFormatter::LONG;
$headingTag = $block->getData('heading_tag') ?: 'h3';
$productName = $block->getProduct()->getName();
$sku = $block->getProduct()->getSku();

?>
<div x-data="reviewList()" x-init="fetchReviews()">
    <template x-for="(review, index) in reviews" :key="index">
        <!-- Display each review. Customize this part based on your design -->
        <div class="review">
            <h3 x-text="review.nickname"></h3>
            <p x-text="review.created_at"></p>
            <p x-text="review.summary"></p>
            <p x-text="review.text"></p>
        </div>
    </template>

    <!-- Pagination -->
    <button @click="fetchReviews(currentPage - 1)" :disabled="currentPage <= 1">Previous</button>
    <button @click="fetchReviews(currentPage + 1)" :disabled="currentPage >= totalPages">Next</button>
</div>

<script>
    function reviewList() {
        return {
            reviews: [],
            currentPage: 1,
            totalPages: 1,
            fetchReviews(page = 1) {
                this.currentPage = page;

                let query =
                    `{
                        products(filter: {sku: {eq: "<?= $sku ?>"}}) {
                        items {
                            review_count
                            rating_summary
                            reviews(pageSize: 5, currentPage: 1) {
                                items {
                                    created_at
                                    nickname
                                    summary
                                    text
                                    average_rating
                                    }
                                }
                            }
                        }
                    }`;


                fetch('/graphql', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        query: query
                    }),
                })
                    .then(response => response.json())
                    .then(data => {
                        this.reviews = data.data.products.items[0].reviews.items;
                        this.totalPages = Math.ceil(data.data.products.items[0].review_count / 10);
                    });
            }
        }
    }
</script>