<?php
namespace Addwish\Awext\Controller\Cart;

use Magento\Framework\App\Action\Context;
use Magento\Framework\Data\Form\FormKey;
use Magento\Checkout\Model\Cart;
use Magento\Catalog\Model\ProductFactory;
use Magento\Framework\UrlInterface;
use Magento\Framework\App\Action\Action;

class Set extends Action {
    /**
     * @var Context
     */
    protected $context;

    /**
     * @var Cart
     */
    protected $cart;

    /**
     * @var ProductFactory
     */
    protected $productFactory;

    /**
     * @var FormKey
     */
    protected $formKey;

    /**
     * @var UrlInterface
     */
    protected $url;

    /**
     * Addpack constructor.
     *
     * @param Context $context
     * @param FormKey $formKey
     * @param Cart $cart
     * @param ProductFactory $productFactory
     * @param UrlInterface $url
     */
    public function __construct(
        Context $context,
        FormKey $formKey,
        Cart $cart,
        ProductFactory $productFactory,
        UrlInterface $url
    ) {
        $this->formKey = $formKey;
        $this->cart = $cart;
        $this->productFactory = $productFactory;
        $this->url = $url;
        parent::__construct($context);
    }
    public function execute() {
        //clear existing cart if any
        foreach ($this->cart->getItems() as $item) {
        	$this->cart->removeItem($item->getId());
        }
        $contents = $this->getRequest()->getParam("contents");
        $contents = explode(",", $contents);
        $formKey = $this->formKey->getFormKey();
        /*
        The recreate basket url is a comma separated list of products.
        Each product entry in the list contains 4 parts: id, qty, super attributes and options.
        The super attribute part and the option part can be a list of multiple key value pairs, 
        separated by a list separater.
        Each value in a key value pair can also be a list of values, separated by an inner list separator.
        :p: = part dilimiter (part :p: part)
        :kv: = key value indicator (key :kv: value)
        :s: = list separator (key:kv:value :s: key:kv:value)
        :is: = inner list separator (key :kv: value :is: value)
        */
        foreach ($contents as $idQtyAttributesAndOptions) {
            try {
                $parts = explode(":p:", $idQtyAttributesAndOptions);
                #check if this setcart link was generated by the old version
                $linkIsGeneratedByOldExtension = false;
                if (count($parts) == 1) {
                    $parts = explode(":", $idQtyAttributesAndOptions);
                    $linkIsGeneratedByOldExtension = true;
                }
                $id = $parts[0];
                $qty = $parts[1];
                $formattedOptions = [];
                $formattedSuperAttributes = [];
                $formattedBundleOption = [];
                $formattedBundleOptionQty = [];
                if (!$linkIsGeneratedByOldExtension) {
                    $superAttributes =  false;
                    if (!empty($parts[2])) {
                        $superAttributes = explode(":s:", $parts[2]);
                    }
                    $options = false;
                    if (!empty($parts[3])) {
                        $options = explode(":s:", $parts[3]);
                    }
                    $bundleOption = false;
                    if (!empty($parts[4])) {
                        $bundleOption = explode(":s:", $parts[4]);
                    }
                    $bundleOptionQty = false;
                    if (!empty($parts[5])) {
                        $bundleOptionQty = explode(":s:", $parts[5]);
                    }
                    if ($superAttributes) {
                        foreach ($superAttributes as $attribute) {
                            $attribute = explode(":kv:", $attribute);
                            $attributeKey = urldecode($attribute[0]);
                            $attributeValue = explode(":is:", $attribute[1]);
                            if (count($attributeValue) > 1) {
                                foreach ($attributeValue as $key => $value) {
                                    $attributeValue[$key] = urldecode($value);
                                }
                            } else {
                                $attributeValue = urldecode($attributeValue[0]);
                            }
                            $formattedSuperAttributes[urldecode($attributeKey)] = $attributeValue;
                        }
                    }
                    if ($options) {
                        foreach ($options as $option) {
                            $option = explode(":kv:", $option);
                            $optionKey = urldecode($option[0]);
                            $optionValue = explode(":is:", $option[1]);
                            if (count($optionValue) > 1) {
                                foreach ($optionValue as $key => $value) {
                                    $optionValue[$key] = urldecode($value);
                                }
                            } else {
                                $optionValue = urldecode($optionValue[0]);
                            }
                            $formattedOptions[urldecode($optionKey)] = $optionValue;
                        }
                    }
                    if ($bundleOption) {
                        foreach ($bundleOption as $option) {
                            $option = explode(":kv:", $option);
                            $optionKey = urldecode($option[0]);
                            $optionValue = explode(":is:", $option[1]);
                            if (count($optionValue) > 1) {
                                foreach ($optionValue as $key => $value) {
                                    $optionValue[$key] = urldecode($value);
                                }
                            } else {
                                $optionValue = urldecode($optionValue[0]);
                            }
                            $formattedBundleOption[urldecode($optionKey)] = $optionValue;
                        }
                    }
                    if ($bundleOptionQty) {
                        foreach ($bundleOptionQty as $optionQty) {
                            $optionQty = explode(":kv:", $optionQty);
                            $optionQtyKey = urldecode($optionQty[0]);
                            $optionQtyValue = explode(":is:", $optionQty[1]);
                            if (count($optionQtyValue) > 1) {
                                foreach ($optionQtyValue as $key => $value) {
                                    $optionQtyValue[$key] = urldecode($value);
                                }
                            } else {
                                $optionQtyValue = urldecode($optionQtyValue[0]);
                            }
                            $formattedBundleOptionQty[urldecode($optionQtyKey)] = $optionQtyValue;
                        }
                    }
                }
                $product = $this->productFactory->create()->load($id);
                if (!$product->getId()) {
                    continue;
                }
                $params = array(
                    "product" => $id,
                    "qty" => $qty,
                    "form_key" => $formKey,
                    "super_attribute" => $formattedSuperAttributes,
                    "options" => $formattedOptions,
                    "bundle_option" => $formattedBundleOption,
                    "bundle_option_qty" => $formattedBundleOptionQty
                );
                $this->cart->addProduct($product, $params);
            } catch (\Exception $e) {
                // ignore error. magento will show this in the cart page anyways.
                // products that can be added will be added.
                continue;
            }
        }
        $this->cart->save();
        $cartUrl = $this->url->getUrl("checkout/cart/index");
        $this->getResponse()->setRedirect($cartUrl);
    }
}
